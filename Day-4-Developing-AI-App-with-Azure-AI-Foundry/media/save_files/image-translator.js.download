const validImageTypes = getValidImageTypes("image-translator");
const allowedExtensions = getAllowedExtensions(validImageTypes);
const beforeTranslateBG =
    BASE_URL + "web_assets/frontend/img/before-translate-bg.svg";
const data = {
    file: "",
    size: 0,
    slang: "en",
    dlang: CURRENT_LANG,
    base64: "",
};
const scriptsToRequire = {
    tiff: {
        src: "https://cdn.rawgit.com/seikichi/tiff.js/master/tiff.min.js",
        id: "tiffjs",
    },
    pdf: {
        src: "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js",
        id: "pdfjs",
    },
    heic: {
        src: BASE_URL + "web_assets/frontend/script/heic2any.js",
        id: "heicjs",
    },
};
$(document).ready(function () {
    $(".unselect-image").on("click", resetTool);
    $(".modal-source-language .lang-grid div").filter(function () {
        if ($(this).attr("data-slang") === CURRENT_LANG) {
            data.slang = CURRENT_LANG;
            $(this).trigger("click").addClass("active");
            $("#s-lang .text-content").text($(this).text().trim());
            return;
        } else {
            data.dlang = "en";
        }
    });
    if (CURRENT_LANG == "en") {
        $(".modal-destination-language .lang-grid div").filter(function () {
            if ($(this).attr("data-slang") === "es") {
                $(this).trigger("click").addClass("active");
                $("#d-lang .text-content").text($(this).text().trim());
                return;
            }
            data.slang = CURRENT_LANG;
            data.dlang = "es";
        });
    }

    $(".js-convert-btn").on("click", (e) => {
        let hasNull = Object.values(data).some((v) => v === null || v === "");
        if (hasNull) {
            alert("Please Select All Fields");
            return;
        }
        $(".unselect-image").css("visibility", "hidden");
        $("#jsShadowRoot").css("pointer-events", "none");
        with_cloudflare_captcha(
            false,
            Date.now() / 1000,
            cloudflareCallback,
            "light",
            "#cloudflare_container",
            null
        );
    });
    const cloudflareCallback = (hash, token, body) => {
        $.ajaxSetup({
            headers: {
                "X-CSRF-TOKEN": $('meta[name="_token"]').attr("content"),
            },
        });
        $.ajax({
            type: "POST",
            url: BASE_URL + "emd/captcha-verify/" + Date.now(),
            data: {
                emd_captcha_1: hash,
                emd_captcha_2: token,
                emd_captcha_3: Date.now() / 1000,
            },
            success: function (response) {
                req_key = response.req_key;
                $("#jsShadowRoot").css("pointer-events", "none");
                imageTranslate();
            },
            error: () => {
                $("#jsShadowRoot").css("pointer-events", "auto");
            },
        });
    };

    const imageTranslate = () => {
        const formData = new FormData();
        formData.append("file", data.file);
        formData.append("slang", data.slang);
        formData.append("dlang", data.dlang);
        formData.append(
            "size",
            parseFloat((data.file.size / (1024 * 1024)).toFixed(2))
        );
        formData.append("name", data.file.name);
        formData.append("req_key", req_key);
        formData.append("e_track_key", getETrackKey());
        formData.append("parent_id", TOOL_ID);

        $.ajaxSetup({
            headers: {
                "X-CSRF-TOKEN": $('meta[name="_token"]').attr("content"),
            },
        });

        $.ajax({
            type: "POST",
            url: BASE_URL + "translate-image",
            data: formData,
            contentType: false,
            processData: false,
            dataType: "json",
            mimeType: "multipart/form-data",
            beforeSend: function () {
                $(".loader-container").removeClass("d-none");
            },
            success: function (response) {
                if (!response.error) {
                    $(".translate-img-div").css("background-image", "none");
                    $("#translatedImage").attr("src", response.image).show();
                    $("#response_img_text").val(response.text);
                    $(".action_btns").removeClass("d-none");
                    $(".unselect-image").addClass("d-none");
                } else {
                    $(".unselect-image")
                        .removeClass("d-none")
                        .css("visibility", "visible");
                }
            },
            error: (error) => {
                const errorResponse = JSON.parse(error.responseText);
                $(".unselect-image")
                    .removeClass("d-none")
                    .css("visibility", "visible");
                if (error.status == 429) {
                    $("#limitExceedModal").show();
                    $(".js-modal-heading").text(dailyLimitExceed);
                    $(".js-popup-err-desc").text(dailyLimitExceedDesc);
                }
                // alert('Something went wrong. Try again later!');
            },
            complete: function (response) {
                $("#jsShadowRoot").css("pointer-events", "auto");
                $(".loader-container").addClass("d-none");
                if (!isFeedBackSubmitted) {
                    $(".review-stars").removeClass("d-none");
                }
            },
        });
    };

    // setTimeout(() => {
    //     shadowRoot();
    // }, 3000);
    $(".js-toggle-choice").on("click", () =>
        $(".browse-drop-content").toggle()
    );
    $(".js-reset-icon").on("click", resetTool);
    $(".swap-langs").on("click", swapInputOutputLangs);
    $(".js-copy-icon").on("click", onClickCopy);
    $(".js-download-icon").on("click", onClickDownload);
    $("#file").on("change", onChangeFile);
    $("#js-search-slang").on("keyup", function () {
        var value = $(this).val().toLowerCase();
        $(".source-lang-item").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
        });
    });
    $("#js-search-dlang").on("keyup", function () {
        var value = $(this).val().toLowerCase();
        $(".destination-lang-item").filter(function () {
            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
        });
    });
    $(".source-lang-item").on("click", onClickSourceLang);
    $(".destination-lang-item").on("click", onClickDestinationLang);

    $("#s-lang").on("click", () => {
        $(".modal-destination-language").hide();
        $(".modal-source-language").toggle();
    });

    $("#d-lang").on("click", () => {
        $(".modal-source-language").hide();
        $(".modal-destination-language").toggle();
    });
    $(document).mouseup(function (e) {
        var container = $(".lang-modal");
        if (
            !container.is(e.target) &&
            container.has(e.target).length === 0 &&
            !$(e.target).is("#s-lang") &&
            !$(e.target).is("#d-lang")
        ) {
            container.hide();
        }
    });
    $("#originalImage,#translatedImage").on("click", viewImage);
});
const onClickSourceLang = (e) => {
    const _this = $(e.currentTarget);
    const key = _this.data("slang");
    const lang = _this.text();
    data.slang = key;
    $("#s-lang .text-content").text(lang);
    $("#js-search-slang").val("").trigger("keyup");
    $(".modal-source-language").hide();
    $(".source-lang-item").removeClass("active");
    _this.addClass("active");
};

const swapInputOutputLangs = (e) => {
    const sourceLangTextElement = $("#s-lang .text-content");
    const destinationLangTextElement = $("#d-lang .text-content");
    const currentSourceLanguage = sourceLangTextElement.text().trim();
    const currentDestinationLanguage = destinationLangTextElement.text().trim();

    if (currentSourceLanguage && currentDestinationLanguage) {
        const matchingSourceLangElement = $(`.source-lang-item`).filter(
            function () {
                return $(this).text().trim() === currentDestinationLanguage;
            }
        );
        const matchingDestinationLangElement = $(
            `.destination-lang-item`
        ).filter(function () {
            return $(this).text().trim() === currentSourceLanguage;
        });

        if (
            matchingSourceLangElement.length > 0 &&
            matchingDestinationLangElement.length > 0
        ) {
            // Swap the text content
            sourceLangTextElement.text(currentDestinationLanguage);
            destinationLangTextElement.text(currentSourceLanguage);

            // Update data attributes for source and destination languages
            data.slang = matchingSourceLangElement.attr("data-slang");
            data.dlang = matchingDestinationLangElement.attr("data-slang");

            // Clear previous active classes and set new ones
            $(".destination-lang-item, .source-lang-item").removeClass(
                "active"
            );
            matchingDestinationLangElement.addClass("active");
            matchingSourceLangElement.addClass("active");
        }
    }
};
const onClickDestinationLang = (e) => {
    const _this = $(e.currentTarget);
    const key = _this.data("slang");
    const lang = _this.text();
    data.dlang = key;
    $("#d-lang .text-content").text(lang);
    $("#js-search-dlang").val("").trigger("keyup");
    $(".modal-destination-language").hide();
    $(".destination-lang-item").removeClass("active");
    _this.addClass("active");
};
const onClickCopy = (e) => {
    const text = $("#response_img_text").val();
    if (text == "") return;
    const _this = $(e.currentTarget);

    _this.find("span").text($("#copiedTooltipLabel").val());
    navigator.clipboard.writeText(text);
    setTimeout(() => {
        _this.find("span").text($("#copyTooltipLabel").val());
    }, 1000);
};
const onClickDownload = async () => {
    const imageUrl = $("#translatedImage").attr("src");
    try {
        const response = await fetch(imageUrl); // Try removing 'no-cors' if the server allows direct download
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);

        // Create a temporary download link
        const a = document.createElement("a");
        a.href = url;
        a.download = "translated_image.png"; // Set file name
        document.body.appendChild(a);
        a.click();

        // Clean up
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
    } catch (error) {
        console.error("Download failed:", error);
    }
};
window.addEventListener("paste", function (e) {
    for (var i = 0; i < e.clipboardData.items.length; i++) {
        var clipboardItem = e.clipboardData.items[i];
        var type = clipboardItem.type;
        if (type == "" || type.indexOf("image") != -1) {
            const file = clipboardItem.getAsFile();
            if (!validateFile(file)) {
                return false;
            }
            fileToBase64(file)
                .then((responceObj) => {
                    check(responceObj.base64, responceObj.file);
                })
                .catch((error) => {
                    console.log(error);
                });
        } else {
            console.log("Not supported: " + type);
        }
    }
});
const afterSelection = (obj) => {
    $(".after-selection").removeClass("d-none");
    $(".before-selection").addClass("d-none");
    $("#originalImage").attr("src", obj.base64);
};
const resetTool = () => {
    $(".action_btns").addClass("d-none");
    $(".after-selection").addClass("d-none");
    $(".before-selection").removeClass("d-none");
    $("#originalImage").attr("src", "");
    $("#translatedImage").attr("src", "");
    $("#file").val("");
    data.file = "";
    data.base64 = "";
    $(".review-stars").addClass("d-none");
    $(".unselect-image").removeClass("d-none").css("visibility", "visible");
    $(".translate-img-div").css("background-image", beforeTranslateBG);
};
const validateFile = (file) => {
    const ext = file.name.toLowerCase().split(".").at(-1);
    if (["heif", "heic"].includes(ext)) {
        return true;
    }
    const fileSize = file.size / (1024 * 1024);
    if (fileSize > maxFileSize) {
        $(".modal").hide();
        $("#limitExceedModal").show();
        $(".js-modal-heading").text(imageSizeForPremium);
        return false;
    }
    const fileType = file.type;
    if (!validImageTypes.includes(fileType)) {
        $(".modal").hide();
        showFileTypeModal(fileTypeNotAllowTitle, supported_format);
        return false;
    }
    return true;
};
const onChangeFile = (e) => {
    const file = e.target.files[0];
    if (!validateFile(file)) {
        return false;
    }
    fileToBase64(file)
        .then((responceObj) => {
            check(responceObj.base64, responceObj.file);
            $(".translate-img-div,.img-preview-box").css(
                "background-image",
                beforeTranslateBG
            );
        })
        .catch((error) => {
            console.log(error);
        });
};
const fileToBase64 = (file) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async (e) => {
            let base64 = e.target.result;
            // Determine the file type and handle accordingly
            switch (file.type) {
                case "image/tiff":
                    await loadScript(
                        scriptsToRequire.tiff.src,
                        scriptsToRequire.tiff.id
                    );
                    base64 = await convertTiffToJpgBase64(file);
                    file = await convertTiffToPng(file, "image/png");
                    resolve({ base64, file });
                    break;
                case "image/webp":
                    base64 = await convertWebpFileToJpgBase64(file);
                    break;
                case "application/pdf":
                    convertPdfToImage(file);
                    return; // Skip the rest of the processing
                case "":
                    const ext = file.name.toLowerCase().split(".").at(-1);
                    if (["heif", "heic"].includes(ext)) {
                        await loadScript(
                            scriptsToRequire.heic.src,
                            scriptsToRequire.heic.id
                        );
                        base64 = await convertHeicToImg(file);
                        file = await convertHeicToJPG(file, "image/jpg");
                        resolve({ base64, file });
                    }
                    break;
                default:
                    if (base64.includes("application/octet-stream")) {
                        base64 = base64.replace(
                            "application/octet-stream",
                            "image/jpg"
                        );
                    }
                    break;
            }
            resolve({ base64, file });
        };
        reader.onerror = (error) => {
            reject(error);
        };

        reader.readAsDataURL(file);
    });
};
const convertTiffToPng = async (file) => {
    return new Promise((resolve, reject) => {
        // Ensure the file is a TIFF file
        if (!file || !file.name.match(/\.(tiff|tif)$/i)) {
            reject(new Error("Please provide a valid TIFF file."));
            return;
        }

        const reader = new FileReader();
        reader.onload = (event) => {
            try {
                const tiff = new Tiff({ buffer: event.target.result });
                const canvas = tiff.toCanvas(); // Decode TIFF into a canvas
                // Convert the canvas to a JPG Blob
                canvas.toBlob((blob) => {
                    if (blob) {
                        const jpgFile = new File(
                            [blob],
                            file.name.replace(/\.(tiff|tif)$/i, ".jpg"),
                            {
                                type: "image/jpg",
                            }
                        );
                        resolve(jpgFile); // Return the jpg file
                    } else {
                        reject(
                            new Error("Failed to create jpg blob from TIFF.")
                        );
                    }
                }, "image/jpg");
            } catch (error) {
                reject(error); // Handle decoding errors
            }
        };

        reader.onerror = () => {
            reject(new Error("Error reading the TIFF file."));
        };
        // Read the file as an ArrayBuffer
        reader.readAsArrayBuffer(file);
    });
};
const convertHeicToJPG = async (file, outputFormat = "image/jpg") => {
    const blob = await heic2any({
        blob: file,
        toType: outputFormat,
    });
    const convertedFile = new File(
        [blob],
        file.name.replace(
            /\.(heic|heif)$/i,
            outputFormat === "image/jpg" ? ".jpg" : ".png"
        ),
        {
            type: outputFormat,
        }
    );
    return convertedFile;
};
const check = (base64, file) => {
    var img_file_format_check = true;
    base64CheckImageExists(base64, function (exists) {
        if (!exists) {
            if (img_file_format_check) {
                // alert("Image not viewable format");
                $(".modal").hide();
                showFileTypeModal(fileTypeNotAllowTitle, supported_format);
            }
            img_file_format_check = false;
            return false;
        }

        const fileSize = (file.size / (1024 * 1024)).toFixed(2);
        if (fileSize > maxFileSize) {
            $(".modal").hide();
            $("#limitExceedModal").show();
            $(".js-modal-heading").text(imageSizeForPremium);
            return false;
        }

        if (!validImageTypes.includes(file.type) && file.type != "") {
            if (img_file_format_check) {
                $(".modal").hide();
                showFileTypeModal(fileTypeNotAllowTitle, supported_format);
            }
            img_file_format_check = false;
            return false;
        }
        data.file = file;
        data.base64 = base64;
        data.size = fileSize;
        const obj = {
            base64,
        };
        $(".unselect-image").css("visibility", "visible");
        $("#jsShadowRoot").removeClass("d-none");
        afterSelection(obj);
    });
};

const viewImage = (e) => {
    const _this = $(e.currentTarget);
    const imageSrc = _this.attr("src");
    const lightbox = $("<div id='lightbox'>").appendTo("body");
    const lightboxImage = $("<img>").attr("src", imageSrc).appendTo(lightbox);
    $(document).on("click", "#lightbox", function () {
        $(this).remove();
    });
};

(() => {
    $("html").on("dragover", (e) => {
        e.preventDefault();
        e.stopPropagation();
    });

    $("html").on("drop", (e) => {
        e.preventDefault();
        e.stopPropagation();
    });
    $(".upload-area").on("dragenter", (e) => {
        e.stopPropagation();
        e.preventDefault();
        $(".upload-section").css({
            "background-color": "#F6F8FC",
        });
    });
    $(".upload-area").on("dragleave", (e) => {
        e.stopPropagation();
        e.preventDefault();
        $(".upload-section").css({
            "background-color": "white",
        });
    });

    // Drag over
    $(".upload-area").on("dragover", (e) => {
        e.stopPropagation();
        e.preventDefault();
        $(".upload-section").css({
            "background-color": "#F6F8FC",
        });
    });
    // Drop
    $(".upload-area").on("drop", (e) => {
        e.stopPropagation();
        e.preventDefault();

        $(".upload-section").css({
            "background-color": "white",
        });

        const file = e.originalEvent.dataTransfer.files[0];
        if (!validateFile(file)) {
            return false;
        }
        fileToBase64(file)
            .then((responceObj) => {
                check(responceObj.base64, responceObj.file);
            })
            .catch((error) => {
                console.log(error);
            });
    });
})();
